The yield method in Java is used to give a hint to the thread scheduler that the current thread is willing to yield its current use of the CPU. It allows other threads with the same priority to have a chance to execute. Here's an example that demonstrates the usage of the yield method:

In this example, we create a MyThread class that extends the Thread class. Inside the run method, the thread prints a sequence of numbers from 1 to 5, along with its name. After printing each number, it calls Thread.yield() to give a chance to other threads of the same priority to execute.

In the Main class, we create two instances of MyThread and start them by calling start().

When you run this example, you'll see output similar to the following:

Thread 1: 1
Thread 2: 1
Thread 1: 2
Thread 2: 2
Thread 1: 3
Thread 2: 3
Thread 1: 4
Thread 2: 4
Thread 1: 5
Thread 2: 5

In this example, both Thread 1 and Thread 2 run concurrently. They print their numbers in an interleaved manner. By calling yield inside the loop, the currently executing thread may voluntarily yield its turn to other threads, giving them an opportunity to execute. The exact interleaving and order of execution may vary across different runs and JVM implementations.





